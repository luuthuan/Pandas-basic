# -*- coding: utf-8 -*-
"""Pandas_Basic

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y35i6IgKbXUjDH6wHHSR78PdyadIibbu

# Getting and Knowing data
"""

import pandas as pd
import numpy as np

"""## Step 1: Import Dataset"""

df = pd.read_csv("/content/drive/MyDrive/Colab datasets/Pandas Basic/chipotle.tsv", sep = '\t')
# File .tsv (Tab Separated Values) tức là các giá trị trong tệp được phân tách bằng các tab
# Nên sử dụng sep = '\t' để chỉ định sử dụng ký tự phân tách trong tệp là tab

df.head(5) # Print 5 first row of dataframe

"""## Step 2: Dataset Overview"""

df.shape # Print number of rows and columns in dataframe

df.info() # Print information about dataframe

df.columns # Print column names in dataframe as object

list(df.columns) # Print column names in dataframe as list

df.index # Print index of dataframe

df.describe() # Print statistical (Thống kê) information about dataframe only columns's dtype = int

df.describe(include = 'all') # Print statistical (Thống kê) information about dataframe with all columns

"""### **loc** & **iloc**

### 1. **loc** - location
"""

df.head()

df.loc[0] # Print first row of dataframe

df.loc[(df.quantity == 15) | (df.item_name == 'Nantucket Nectar')]
# Print all rows with multiple condition
# Print with 'or' operator

df.loc[(df.quantity == 2) & (df.item_name == 'Nantucket Nectar')]
# Print with 'and' operator

df.loc[(df.quantity >= 10)]

df.loc[(df.quantity == 2) & (df.item_name == 'Nantucket Nectar'), ['order_id', 'quantity', 'item_name', 'item_price']]
# Print specific columns with multiple condition

"""### 2. **iloc** - Index Location"""

df.iloc[9] # Print row with index = 9 return series type

df.iloc[[9]] # Print row with index = 9 return dataframe type

df.iloc[0:10] # Print rows with index from 0 to 10 return dataframe type

X = df.iloc[3:5, :-1] # Print rows with index from 3 to 5 and columns with index from 0 to -1
print(X)

Y = df.iloc[3:5, -1] # Print rows with index from 3 to 5 and column with index -1
print(Y)

"""## Step 3: Data Manipulation - thao tác với dữ liệu"""

df.item_price

"""### **dtype will return below special character**



*   'b': boolean
*   'i': (signed) integer
*   'u': (unsigned) integer
*   'f': floating-point
*   'c': complex-floating point
*   '0': (Python) objects
*   'S','a': (byte-) string
*   'U': Unicode
*   'V' raw data (void)

"""

df.item_price.dtype
# '0' is Python objects datatype

"""### Covert Python objects dtype to float dtype by
### Apply() function
"""

W = df.item_price.apply(lambda x : float(x.replace('$', '')))
 print(W)

df.item_price = W # Apply function to dataframe
print(df.item_price)

df['total_price'] = df['quantity'] * df['item_price'] # Create new column with name 'total_price'
print(df.total_price)
df.head()

"""### How much was the revenue (doanh thu) for the period in the dataset ?"""

revenue = df['total_price'].sum()
 print(revenue)

"""### Which was the most-ordered item ?

---
## Group By


"""

# df.groupby('item_name')['quantity'].apply(print)
c = df.groupby('item_name')['quantity'].sum() # Print total quantity of each item
c.sort_values(ascending = False).head(5) # Print most ordered item

"""### Unique Value"""

df.item_name.value_counts() # Print total quantity of each item
# Với mỗi món ăn có bao nhiêu cái orders"

df.item_name.nunique() # Total of unique items was sell

